import javax.crypto.Cipher;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.*;

public class AsymmetricEncryptionExample {

    public static void main(String[] args) {
        try {
            // Load public and private keys from files on D drive
            String publicKeyPath = "D:/path/to/publicKey.pem";
            String privateKeyPath = "D:/path/to/privateKey.pem";

            PublicKey publicKey = readPublicKeyFromFile(publicKeyPath);
            PrivateKey privateKey = readPrivateKeyFromFile(privateKeyPath);

            // Encrypt data with the public key
            String dataToEncrypt = "Hello, this is sensitive information!";
            byte[] encryptedData = encryptWithPublicKey(dataToEncrypt, publicKey);
            System.out.println("Encrypted Data: " + Base64.getEncoder().encodeToString(encryptedData));

            // Decrypt the data with the private key
            String decryptedData = decryptWithPrivateKey(encryptedData, privateKey);
            System.out.println("Decrypted Data: " + decryptedData);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static PublicKey readPublicKeyFromFile(String fileName) throws Exception {
        String pemFormatKey = new String(Files.readAllBytes(Paths.get(fileName)));
        String encodedKey = pemFormatKey.replace("-----BEGIN PUBLIC KEY-----", "").replace("-----END PUBLIC KEY-----", "").replaceAll("\\s", "");
        byte[] keyBytes = Base64.getDecoder().decode(encodedKey);
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        return keyFactory.generatePublic(new X509EncodedKeySpec(keyBytes));
    }

    private static PrivateKey readPrivateKeyFromFile(String fileName) throws Exception {
        String pemFormatKey = new String(Files.readAllBytes(Paths.get(fileName)));
        String encodedKey = pemFormatKey.replace("-----BEGIN PRIVATE KEY-----", "").replace("-----END PRIVATE KEY-----", "").replaceAll("\\s", "");
        byte[] keyBytes = Base64.getDecoder().decode(encodedKey);
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(keyBytes));
    }

    private static byte[] encryptWithPublicKey(String data, PublicKey publicKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        return cipher.doFinal(data.getBytes());
    }

    private static String decryptWithPrivateKey(byte[] encryptedData, PrivateKey privateKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] decryptedBytes = cipher.doFinal(encryptedData);
        return new String(decryptedBytes);
    }
}
