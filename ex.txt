package com.example.datasecurity;

import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import java.security.*;
import java.util.Base64;

public class DataSecurity {

    private static SecretKey symmetricKey;
    private KeyPair asymmetricKeyPair;

    public DataSecurity() {
        try {
            symmetricKey = generateSymmetricKey();
            asymmetricKeyPair = generateAsymmetricKeyPair();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //  Generate and print symmetric key
    private void generateAndPrintSymmetricKey() {
        System.out.println("Symmetric Key: " + Base64.getEncoder().encodeToString(symmetricKey.getEncoded()));
    }

    //  Generate and print asymmetric keys
    private void generateAndPrintAsymmetricKeys() {
        PublicKey publicKey = asymmetricKeyPair.getPublic();
        PrivateKey privateKey = asymmetricKeyPair.getPrivate();

        System.out.println("Asymmetric Public Key: " + Base64.getEncoder().encodeToString(publicKey.getEncoded()));
        System.out.println("Asymmetric Private Key: " + Base64.getEncoder().encodeToString(privateKey.getEncoded()));
    }

    public byte[] encryptData(String data) {
        try {
            // Task 1: Symmetric key encryption
            byte[] encryptedData = encryptWithSymmetricKey(data, symmetricKey);
            System.out.println("Encrypted Data with Symmetric Key: " + Base64.getEncoder().encodeToString(encryptedData));

            // Task 2: Asymmetric key encryption of the symmetric key
            byte[] encryptedSymmetricKey = encryptWithAsymmetricKey(symmetricKey.getEncoded(), asymmetricKeyPair.getPublic());
            System.out.println("Encrypted Symmetric Key with Asymmetric Key: " + Base64.getEncoder().encodeToString(encryptedSymmetricKey));

            // Task 3: Adding a signature
            byte[] signature = signData(encryptedData, asymmetricKeyPair.getPrivate());
            System.out.println("Signature: " + Base64.getEncoder().encodeToString(signature));

            // For testing purposes, you can return the encrypted data, encrypted symmetric key, and signature.
            return encryptedData;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private SecretKey generateSymmetricKey() throws NoSuchAlgorithmException {
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(256);
        return keyGenerator.generateKey();
    }

    private byte[] encryptWithSymmetricKey(String data, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        return cipher.doFinal(data.getBytes());
    }

    private KeyPair generateAsymmetricKeyPair() throws NoSuchAlgorithmException {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(2048);
        return keyPairGenerator.generateKeyPair();
    }

    private byte[] encryptWithAsymmetricKey(byte[] data, PublicKey publicKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        return cipher.doFinal(data);
    }

    private byte[] signData(byte[] data, PrivateKey privateKey) throws Exception {
        Signature signature = Signature.getInstance("SHA256withRSA");
        signature.initSign(privateKey);
        signature.update(data);
        return signature.sign();
    }

    // Verify Signature
    private boolean verifySignature(byte[] encryptedData, byte[] signature, PublicKey publicKey) {
        try {
            Signature verifySignature = Signature.getInstance("SHA256withRSA");
            verifySignature.initVerify(publicKey);
            verifySignature.update(encryptedData);
            return verifySignature.verify(signature);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    //  Decrypt Symmetric Key with Asymmetric Private Key
    private SecretKey decryptSymmetricKey(byte[] encryptedSymmetricKey, PrivateKey privateKey) {
        try {
            Cipher cipher = Cipher.getInstance("RSA");
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            byte[] decryptedSymmetricKey = cipher.doFinal(encryptedSymmetricKey);

            // Convert the decrypted byte array back to SecretKey
            return new SecretKeySpec(decryptedSymmetricKey, 0, decryptedSymmetricKey.length, "AES");
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    //  Decrypt Data with Symmetric Key
    private byte[] decryptDataWithSymmetricKey(byte[] encryptedData, SecretKey key) {
        try {
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.DECRYPT_MODE, key);
            return cipher.doFinal(encryptedData);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    // Main method for testing
    public static void main(String[] args) throws Exception {
        DataSecurity dataSecurity = new DataSecurity();

        dataSecurity.generateAndPrintSymmetricKey();

        byte[] encryptedData = dataSecurity.encryptData("Testing data for encryption");

        dataSecurity.generateAndPrintAsymmetricKeys();

        boolean signatureVerified = dataSecurity.verifySignature(encryptedData, dataSecurity.signData(encryptedData, dataSecurity.asymmetricKeyPair.getPrivate()), dataSecurity.asymmetricKeyPair.getPublic());
        if (signatureVerified) {
            SecretKey decryptedSymmetricKey = dataSecurity.decryptSymmetricKey(dataSecurity.encryptWithAsymmetricKey(dataSecurity.symmetricKey.getEncoded(), dataSecurity.asymmetricKeyPair.getPublic()), dataSecurity.asymmetricKeyPair.getPrivate());
            byte[] decryptedData = dataSecurity.decryptDataWithSymmetricKey(encryptedData, decryptedSymmetricKey);

            System.out.println("Signature Verified: " + signatureVerified);
            System.out.println("Decrypted Symmetric Key: " + Base64.getEncoder().encodeToString(decryptedSymmetricKey.getEncoded()));
            System.out.println("Decrypted Data: " + new String(decryptedData));
        } else {
            System.out.println("Signature Verification Failed!");
        }

    }
}